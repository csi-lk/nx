name: publish

on:
  # Automated schedule - canary releases from master
  schedule:
    - cron: "0 3 * * 2-6" # Tuesdays - Saturdays, at 3am UTC
  # Manual trigger - PR releases or dry-runs (based on workflow inputs)
  workflow_dispatch:
    inputs:
      pr:
        description: "If set, a real release will be created for the branch associated with the given PR number. If blank, a dry-run of the currently selected branch will be performed."
        required: false
        type: number
  release:
    types: [ published ]

env:
  DEBUG: napi:*
  NX_RUN_GROUP: ${{ github.run_id }}-${{ github.run_attempt }}
  CYPRESS_INSTALL_BINARY: 0

jobs:
  # We first need to determine if we need a custom ref to use for the git checkout in subsequent steps.
  # This decision depends upon the event type that triggered the workflow:
  #
  # - schedule:
  #   - We are running a canary release which always comes from the master branch, we can use default ref resolution
  #     in actions/checkout.
  #
  # - release:
  #   - We are running a full release which is based on the tag that triggered the release event, we can use default
  #     ref resolution in actions/checkout.
  #
  # - workflow_dispatch:
  #   - We are either running a dry-run on the current branch, in which case we can use default ref resolution in actions/checkout,
  #     or we are creating a PR release for the given PR number, in which case we should use a custom ref of the PR branch name.
  resolve-checkout-data:
    name: Resolve Checkout Data
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ fromJSON(steps.resolve_ref.outputs.result).ref }}
      repo: ${{ fromJSON(steps.resolve_ref.outputs.result).repo }}
      full_pr_sha: ${{ fromJSON(steps.resolve_ref.outputs.result).full_pr_sha }}
    steps:
      - name: Resolve ref and repo to use for checkout
        id: resolve_ref
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ github.event.inputs.pr }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // We use an empty strings as default values so that we can let the `actions/checkout` action apply its default resolution
            const DEFAULT_REF = "";
            const DEFAULT_REPO = "";

            switch (process.env.GITHUB_EVENT_NAME) {
              // In this case the default checkout logic should use the default (master) branch
              case 'schedule':
                console.log("Schedule event detected, default checkout logic will be used");
                return {
                  ref: DEFAULT_REF,
                  repo: DEFAULT_REPO,
                  full_pr_sha: "",
                };

              // In this case the default checkout logic should use the tag that triggered the release event
              case 'release':
                console.log("Release event detected, default checkout logic will be used");
                return {
                  ref: DEFAULT_REF,
                  repo: DEFAULT_REPO,
                  full_pr_sha: "",
                };

              case 'workflow_dispatch': {
                console.log("Workflow dispatch event detected");
                const prNumber = process.env.PR_NUMBER;

                // In this case the default checkout logic should use the branch/tag selected when triggering the workflow
                if (!prNumber) {
                  console.log("No PR number detected, default checkout logic will be used");
                  return {
                    ref: DEFAULT_REF,
                    repo: DEFAULT_REPO,
                    full_pr_sha: "",
                  };
                }
              
                console.log(`PR number detected (${prNumber}), resolving PR details...`);
                const pr = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                });
                console.log(`Owner: ${context.repo.owner}`);
                console.log(`Repo: ${context.repo.repo}`);
                console.log(`Fork repo:`, pr.data.head.repo.full_name);
                console.log(`Fetched PR details: ${pr.data.head.ref}`);
                console.log(`Full PR SHA: ${pr.data.head.sha}`);

                return {
                  ref: pr.data.head.ref,
                  repo: pr.data.head.repo.full_name,
                  full_pr_sha: pr.data.head.sha,
                };
              }

              default:
                throw new Error(`The publish.yml workflow was triggered by an unexpected event: "${process.env.GITHUB_EVENT_NAME}"`);
            }

      - name: (PR Release Only) Check out latest master
        if: ${{ fromJSON(steps.resolve_ref.outputs.result).ref != '' }}
        uses: actions/checkout@v4
        with:
          # Check out the latest master branch to get its copy of nx-release.ts
          repository: nrwl/nx
          ref: master
          path: latest-master-checkout

      - name: (PR Release Only) Check out PR branch
        if: ${{ fromJSON(steps.resolve_ref.outputs.result).ref != '' }}
        uses: actions/checkout@v4
        with:
          # Check out the PR branch to get its copy of nx-release.ts
          repository: ${{ fromJSON(steps.resolve_ref.outputs.result).repo }}
          ref: ${{ fromJSON(steps.resolve_ref.outputs.result).ref }}
          path: pr-branch-checkout

      - name: (PR Release Only) Ensure that nx-release.ts has not changed in the PR being released
        if: ${{ fromJSON(steps.resolve_ref.outputs.result).ref != '' }}
        env:
          FILE_TO_COMPARE: "scripts/nx-release.ts"
        run: |
          if ! cmp -s "latest-master-checkout/${{ env.FILE_TO_COMPARE }}" "pr-branch-checkout/${{ env.FILE_TO_COMPARE }}"; then
            echo "🛑 Error: The file ${{ env.FILE_TO_COMPARE }} is different on the ${{ fromJSON(steps.resolve_ref.outputs.result).ref }} branch on ${{ fromJSON(steps.resolve_ref.outputs.result).repo }} vs latest master on nrwl/nx, cancelling workflow."
            exit 1
          else
            echo "✅ The file ${{ env.FILE_TO_COMPARE }} is identical between the ${{ fromJSON(steps.resolve_ref.outputs.result).ref }} branch on ${{ fromJSON(steps.resolve_ref.outputs.result).repo }} and latest master on nrwl/nx."
          fi

  build:
    needs: [resolve-checkout-data]
    if: ${{ github.repository_owner == 'nrwl' }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
            build: |
              pnpm nx run-many --target=build-native -- --target=x86_64-apple-darwin
          - host: windows-latest
            build: pnpm nx run-many --target=build-native -- --target=x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          # Windows 32bit (not needed)
          # - host: windows-latest
          #   build: |
          #     yarn nx -- run-many --target=build-native -- --target=i686-pc-windows-msvc
          #   target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              npm i -g pnpm@8.15.7 --force &&
              pnpm --version &&
              pnpm install --frozen-lockfile &&
              pnpm nx run-many --verbose --target=build-native -- --target=x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              npm i -g pnpm@8.15.7 --force &&
              pnpm --version &&
              pnpm install --frozen-lockfile &&
              pnpm nx run-many --verbose --target=build-native -- --target=x86_64-unknown-linux-musl
          - host: macos-13
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              pnpm nx run-many --target=build-native -- --target=aarch64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              npm i -g pnpm@8.15.7 --force &&
              pnpm --version &&
              pnpm install --frozen-lockfile &&
              pnpm nx run-many --verbose --target=build-native -- --target=aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: |
              pnpm nx run-many --target=build-native -- --target=armv7-unknown-linux-gnueabihf
          # Android (not needed)
          # - host: ubuntu-latest
          #   target: aarch64-linux-android
          #   build: |
          #     pnpm nx run-many --target=build-native -- --target=aarch64-linux-android
          # - host: ubuntu-latest
          #   target: armv7-linux-androideabi
          #   build: |
          #     pnpm nx run-many --target=build-native -- --target=armv7-linux-androideabi
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              rustup target add aarch64-unknown-linux-musl &&
              npm i -g pnpm@8.15.7 --force &&
              pnpm --version &&
              pnpm install --frozen-lockfile &&
              pnpm nx run-many --verbose --target=build-native -- --target=aarch64-unknown-linux-musl
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: pnpm nx run-many --target=build-native -- --target=aarch64-pc-windows-msvc
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ needs.resolve-checkout-data.outputs.repo }} 
          ref: ${{ needs.resolve-checkout-data.outputs.ref }}

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          check-latest: true
          cache: 'pnpm'

      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-registry
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.10.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        if: ${{ !matrix.settings.docker }}
        run: pnpm install --frozen-lockfile
        timeout-minutes: 30
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          check-latest: true
          cache: pnpm
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: --user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: packages/**/*.node
          if-no-files-found: error

  build-freebsd:
    needs: [resolve-checkout-data]
    if: ${{ github.repository_owner == 'nrwl' }}
    runs-on: macos-13-large
    name: Build FreeBSD
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
        if: ${{ github.event_name != 'schedule' }}
        with:
          repository: ${{ needs.resolve-checkout-data.outputs.repo }} 
          ref: ${{ needs.resolve-checkout-data.outputs.ref }}

      - name: Build
        id: build
        if: ${{ github.event_name != 'schedule' }}
        uses: cross-platform-actions/action@v0.22.0
        env:
          DEBUG: napi:*
          RUSTUP_IO_THREADS: 1
          NX_PREFER_TS_NODE: true
          PLAYWRIGHT_BROWSERS_PATH: 0
        with:
          operating_system: freebsd
          version: '13.2'
          architecture: x86-64
          environment_variables: DEBUG RUSTUP_IO_THREADS CI NX_PREFER_TS_NODE PLAYWRIGHT_BROWSERS_PATH
          shell: bash
          run: |
            env
            whoami
            sudo pkg install -y -f node libnghttp2 npm git
            sudo npm install --location=global --ignore-scripts pnpm@8.15.7
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain stable
            source "$HOME/.cargo/env"
            echo "~~~~ rustc --version ~~~~"
            rustc --version
            echo "~~~~ node -v ~~~~"
            node -v
            echo "~~~~ pnpm --version ~~~~"
            pnpm --version
            pwd
            ls -lah
            whoami
            env
            freebsd-version
            mkdir -p /Users/runner/work/_temp/_github_workflow
            echo "{}" > /Users/runner/work/_temp/_github_workflow/event.json
            pnpm install --frozen-lockfile --ignore-scripts
            pnpm nx run-many --verbose --outputStyle stream --target=build-native -- --target=x86_64-unknown-freebsd
            pnpm nx reset
            rm -rf node_modules
            rm -rf dist
            echo "KILL ALL NODE PROCESSES"
            killall node || true
            echo "COMPLETE"

      - name: Upload artifact
        if: ${{ github.event_name != 'schedule' }}
        uses: actions/upload-artifact@v3
        with:
          name: bindings-freebsd
          path: packages/**/*.node
          if-no-files-found: error

  publish:
    if: ${{ github.repository_owner == 'nrwl' }}
    name: Publish
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    needs:
      - resolve-checkout-data
      - build-freebsd
      - build
    env:
      GH_TOKEN: ${{ github.token }}
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      NPM_CONFIG_PROVENANCE: true
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ needs.resolve-checkout-data.outputs.repo }}
          ref: ${{ needs.resolve-checkout-data.outputs.ref }}

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'
          check-latest: true
          cache: 'pnpm'

      - name: Check NPM Credentials
        run: npm whoami && echo "NPM credentials are valid" || (echo "NPM credentials are invalid or have expired." && exit 1)

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      # This command will appropriately fail if no artifacts are available
      - name: List artifacts
        run: ls -R artifacts
        shell: bash

      - name: Generate version string for PR release if applicable
        id: versioning
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ github.event.inputs.pr }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = process.env.PR_NUMBER;
            if (!prNumber) {
              return {
                pr_release_version: "",
                short_sha: "",
                long_sha: "",
              };
            }

            // Get the current PR short git sha
            const fullSHA = "${{ needs.resolve-checkout-data.outputs.full_pr_sha }}";
            const shortSHA = fullSHA.slice(0, 7);
            const prReleaseVersion = `0.0.0-pr-${prNumber}-${shortSHA}`;
            console.log(`Generated PR release version: ${prReleaseVersion}`);
            return {
              pr_release_version: prReleaseVersion,
              short_sha: shortSHA,
              long_sha: fullSHA,
            };

      - name: Publish
        env:
          PR_RELEASE_VERSION: ${{ fromJson(steps.versioning.outputs.result).pr_release_version }}
        run: |
          # If the PR number is set, use that to construct the publish branch name
          # else use existing logic of using the $GITHUB_REF_NAME
          if [ -n "${{ github.event.inputs.pr }}" ]; then
            git checkout -b publish/pr-${{ github.event.inputs.pr }}
          else
            git checkout -b publish/$GITHUB_REF_NAME
          fi
          # If triggered by the cron, create a canary release
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION="canary"
          else
            # Otherwise, use the tag name (if triggered via release), or explicit version (if triggered via workflow_dispatch)
            VERSION="${GITHUB_REF_NAME}"
          fi
          # If triggered via workflow_dispatch, we are either performing a dry-run on the current branch, or creating a PR release for the given PR number
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Workflow dispatch"
            # If the PR number is set, and pr_release_version is set, use the generated pr_release_version
            if [ -n "${{ github.event.inputs.pr }}" ] && [ -n $PR_RELEASE_VERSION ]; then
              DRY_RUN=""
              VERSION="$PR_RELEASE_VERSION"
              echo "Version for PR release set to: $VERSION"
              echo "PR Release from repo: ${{ needs.resolve-checkout-data.outputs.repo }}"
              echo "PR Release from branch: ${{ needs.resolve-checkout-data.outputs.ref }}"
            else
              # Otherwise, perform a dry-run on the current branch
              DRY_RUN="--dry-run"
              VERSION="0.0.0-dry-run.0"
            fi
          else
            DRY_RUN=""
          fi
          echo "Version set to: $VERSION"
          echo "DRY_RUN set to: $DRY_RUN"
          pnpm nx-release --local=false $VERSION $DRY_RUN

      - name: Trigger Docs Release
        # Publish docs only on a full release
        if: ${{ !github.event.release.prerelease && !github.event.inputs.pr }}
        run: |
          # The GITHUB_REF_NAME is a full version (i.e. 17.3.2). The branchName will only use the major version number.
          # We will publish docs to the website branch based on the current tag (i.e. website-17)
          branchName=website-${GITHUB_REF_NAME%.*.*}
          # We force recreate the branch in order to always be up to date and avoid merge conflicts within the automated workflow
          git branch -f $branchName
          git push -f origin $branchName

      - name: (PR Release Only) Create comment for successful PR release
        if: success() && github.event.inputs.pr && fromJson(steps.versioning.outputs.result).pr_release_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.pr }};
            const prReleaseVersion = "${{ fromJson(steps.versioning.outputs.result).pr_release_version }}";
            const repo = "${{ needs.resolve-checkout-data.outputs.repo }}";
            const message = `
            ## 🐳 We have a release for that!

            This PR has a release associated with it. You can try it out using this command:
            
            \`\`\`bash
            npx create-nx-workspace@${prReleaseVersion} my-workspace
            \`\`\`

            Or just copy this version and use it in your own command:
            \`\`\`bash
            ${prReleaseVersion}
            \`\`\`

            | Release details | 📑 |
            | ------------- | ------------- |
            | **Published version** | [${prReleaseVersion}](https://www.npmjs.com/package/nx/v/${prReleaseVersion}) |
            | **Triggered by** | @${{ github.triggering_actor }} |
            | **Branch** | [${{ needs.resolve-checkout-data.outputs.ref }}](https://github.com/${repo}/tree/${{ needs.resolve-checkout-data.outputs.ref }}) |
            | **Commit** | [${{ fromJson(steps.versioning.outputs.result).short_sha }}](https://github.com/${repo}/commit/${{ fromJson(steps.versioning.outputs.result).long_sha }}) |
            | **Workflow run** | [${{ github.run_id }}](https://github.com/nrwl/nx/actions/runs/${{ github.run_id }}) |

            To request a new release for this pull request, mention someone from the Nx team or the \`@nrwl/nx-pipelines-reviewers\`.   
            `;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: message
            });
      
      - name: (PR Release Only) Create comment for failed PR release
        if: failure() && github.event.inputs.pr && fromJson(steps.versioning.outputs.result).pr_release_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.pr }};
            const prReleaseVersion = "${{ fromJson(steps.versioning.outputs.result).pr_release_version }}";
            const message = `
            Failed to publish a PR release of this pull request, triggered by @${{ github.triggering_actor }}. 

            See the failed workflow run at: https://github.com/nrwl/nx/actions/runs/${{ github.run_id }}
            `;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: message
            });
